{
  "name": "xlsx-template",
  "version": "0.0.2",
  "description": "Generate .xlsx (Excel) files from templates built in Excel",
  "main": "./lib/index",
  "author": {
    "name": "Martin Aspeli"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/optilude/xlsx-template.git"
  },
  "bugs": {
    "url": "http://github.com/optilude/xlsx-template/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/optilude/xlsx-template/raw/master/LICENSE"
    }
  ],
  "dependencies": {
    "elementtree": "0.1.5",
    "node-zip": "1.0.1"
  },
  "devDependencies": {
    "buster": "0.7.6",
    "grunt": "~0.4.1",
    "grunt-buster": "~0.2.1"
  },
  "scripts": {
    "test": "./node_modules/buster/bin/buster-test"
  },
  "readme": "# XLSX Template\n\n[![Build status](https://api.travis-ci.org/optilude/xlsx-template.png?branch=master)](http://travis-ci.org/optilude/xlsx-template)\n\nThis module provides a means of generating \"real\" Excel reports (i.e. not CSV\nfiles) in NodeJS applications.\n\nThe basic principle is this: You create a template in Excel. This can be\nformatted as you wish, contain formulae etc. In this file, you put placeholders\nusing a specific syntax (see below). In code, you build a map of placeholders\nto values and then load the template, substitute the placeholders for the\nrelevant values, and generate a new .xlsx file that you can then serve to the\nuser.\n\n## Placeholders\n\nPlaceholders are inserted in cells in a spreadsheet. It does not matter how\nthose cells are formatted, so e.g. it is OK to insert a placeholder (which is\ntext content) into a cell formatted as a number or currecy or date, if you\nexpect the placeholder to resolve to a number or currency or date.\n\n### Scalars\n\nSimple placholders take the format `${name}`. Here, `name` is the name of a\nkey in the placeholders map. The value of this placholder here should be a\nscalar, i.e. not an array or object. The placeholder may appear on its own in a\ncell, or as part of a text string. For example:\n\n    | Extracted on: | ${extractDate} |\n\nmight result in (depending on date formatting in the second cell):\n\n    | Extracted on: | Jun-01-2013 |\n\nHere, `extractDate` may be a date and the second cell may be formatted as a\nnumber.\n\n### Columns\n\nYou can use arrays as placeholder values to indicate that the placeholder cell\nis to be replicated across columns. In this case, the placeholder cannot appear\ninside a text string - it must be the only thing in its cell. For example,\nif the placehodler value `dates` is an array of dates:\n\n    | ${dates} |\n\nmight result in:\n\n    | Jun-01-2013 | Jun-02-2013 | Jun-03-2013 |\n\n### Tables\n\nFinally, you can build tables made up of multiple rows. In this case, each\nplaceholder should be prefixed by `table:` and contain both the name of the\nplaceholder variable (a list of objects) and a key (in each object in the list).\nFor example:\n\n    | Name                 | Age                 |\n    | ${table:people.name} | ${table:people.age} |\n\nIf the replacement value under `people` is an array of objects, and each of\nthose objects have keys `name` and `age`, you may end up with something like:\n\n    | Name        | Age |\n    | John Smith  | 20  |\n    | Bob Johnson | 22  |\n\nIf a particular value is an array, then it will be repeated accross columns as\nabove.\n\n## Generating reports\n\nTo make this magic happen, you need some code like this:\n\n    var XlsxTemplate = require('xlsx-template');\n\n    // Load an XLSX file into memory\n    fs.readFile(path.join(__dirname, 'templates', 'template1.xlsx'), function(err, data) {\n\n        // Create a template\n        var template = new XlsxTemplate(data);\n\n        // Replacements take place on first sheet\n        var sheetNumber = 1;\n\n        // Set up some placeholder values matching the placeholders in the template\n        var values = {\n                extractDate: new Date(),\n                dates: new Date(\"2013-06-01\"), new Date(\"2013-06-02\"), new Date(\"2013-06-03\"),\n                people: [\n                    {name: \"John Smith\", age: 20},\n                    {name: \"Bob Johnson\", age: 22}\n                ]\n            };\n\n        // Perform substitution\n        template.substitute(sheetNumber, values);\n\n        // Get binary data\n        var data = template.generate();\n\n        // ...\n\n    });\n\nAt this stage, `data` is a string blob representing the compressed archive that\nis the `.xlsx` file (that's right, a `.xlsx` file is a zip file of XML files,\nif you didn't know). You can send this back to a client, store it to disk, \nattach it to an email or do whatever you want with it.\n\n## Caveats\n\n* The spreadsheet must be saved in `.xlsx` format. `.xls`, `.xlsb` or `.xlsm`\n  won't work.\n* Column (array) and table (array-of-objects) insertions cause rows and cells to\n  be inserted or removed. When this happens, only a limited number of\n  adjustments are made:\n    * Merged cells and named cells/ranges to the right of cells where insertions\n      or deletions are made are moved right or left, appropriately. This may\n      not work well if cells are merged across rows, unless all rows have the\n      same number of insertions.\n    * Merged cells, named tables or named cells/ranges below rows where further\n      rows are inserted are moved down.\n  Formulae are not adjusted.\n* As a corollary to this, it is not always easy to build formulae that refer\n  to cells in a table (e.g. summing all rows) where the exact number of rows\n  or columns is not known in advance. There are two strategies for dealing\n  with this:\n    * Put the table as the last (or only) thing on a particular sheet, and\n      use a formula that includes a large number of rows or columns in the\n      hope that the actual table will be smaller than this number.\n    * Use named tables. When a placeholder in a named table causes columns or\n      rows to be added, the table definition (i.e. the cells included in the\n      table) will be updated accordingly. You can then use things like\n      `TableName[ColumnName]` in your formula to refer to all values in a given\n      column in the table as a logical range.\n* Placeholders only work in simple cells and tables, pivot tables or\n  other such things.\n\n## Changelog\n\n### Version 0.0.2\n\n* Fix a potential issue with the typing of string indices that could cause the\n  first string to not render correctly if it contained a substitution.\n\n### Version 0.0.1\n\n* Initial release\n",
  "readmeFilename": "README.md",
  "_id": "xlsx-template@0.0.2",
  "dist": {
    "shasum": "d61be04074a68ee3fdd6254545f6dbaa2a8f979b",
    "tarball": "http://registry.npmjs.org/xlsx-template/-/xlsx-template-0.0.2.tgz"
  },
  "_from": "xlsx-template@",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "optilude",
    "email": "optilude@gmail.com"
  },
  "maintainers": [
    {
      "name": "optilude",
      "email": "optilude@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "d61be04074a68ee3fdd6254545f6dbaa2a8f979b",
  "_resolved": "https://registry.npmjs.org/xlsx-template/-/xlsx-template-0.0.2.tgz"
}
